#!/bin/bash 
# -----------------------------------------
source /etc/MySB/inc/includes_before.bsh
# -----------------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

echo
echo -e "${CRED}If you lose connection during installation, restart the SSH session and run the following command:$CEND"
echo -e "${CGREEN}	screen -r MySB_UpgradeMe$CEND"
echo
echo -e "${CYELLOW}During the update of some packages, questions may be asked to you. Leave the default choice, and press the Enter key.$CEND"
echo
QuestionGetString NO  "Type 'yes' to continue or 'no' to abort ?" CONTINUE YES
if [ "$CONTINUE" == "NO" ]; then
	EndingScript 0
fi


#### 1 - Create missing directories and DBs
echo -e -n "${CBLUE}Create missing directories, databases and change owners and rights$CEND..."
ManageDirectoriesAndFiles
StatusSTD

#### 2 - Move some files & directories
echo -e -n "${CBLUE}Move some files & directories$CEND..."
rm -f /etc/MySB/logs/*
if [ -f /root/2 ]; then rm -f /root/2; fi
if [ -d /etc/MySB/scripts/blocklist ]; then mv /etc/MySB/scripts/blocklist /etc/MySB/files/blocklist; fi
if [ -f /usr/share/nginx/html/50x.html ]; then rm -f /usr/share/nginx/html/50x.html; fi
if [ -d /usr/share/nginx/html/seedbox-manager ]; then mv /usr/share/nginx/html/seedbox-manager /etc/MySB/web/; fi
if [ -d /usr/share/nginx/html/rutorrent ]; then mv /usr/share/nginx/html/rutorrent /etc/MySB/web/; fi
if [ -d /usr/share/nginx/html/Cakebox-light ]; then mv /usr/share/nginx/html/Cakebox-light /etc/MySB/web/; fi
if [ -d /etc/MySB/sources/dnscrypt/ ]; then rm -rf /etc/MySB/sources/dnscrypt/; fi
StatusSTD

#### 7 - Sources List
source /etc/MySB/install/SourcesList.bsh

#### 8 - Packages
echo -e -n "${CBLUE}Install missing packages$CEND..."
screen -dmS PHP /bin/bash /etc/MySB/install/Packages.bsh 'UPGRADE';
WaitingScreen PHP
StatusSTD

#### 3 - SQLite (move flat files to database)
echo -e -n "${CBLUE}Create databases$CEND..."
screen -dmS PHP /bin/bash /etc/MySB/install/SQLite.bsh 'UPGRADE';
WaitingScreen PHP
StatusSTD

#### 4 - Vars
echo -e -n "${CBLUE}Read database informations$CEND..."
if [ -f /etc/MySB/inc/vars.bsh ]; then source /etc/MySB/inc/vars.bsh; fi
if [ -f /etc/MySB/inc/funcs.bsh ]; then source /etc/MySB/inc/funcs.bsh; fi
ListingUsers
StatusSTD

#### 5 - Tweaks
echo -e -n "${CBLUE}Sytem optimizations$CEND..."
screen -dmS PHP /bin/bash /etc/MySB/install/Tweaks.bsh 'UPGRADE';
WaitingScreen PHP
StatusSTD

#### 6 - STOP services
# ManageServices stop "cron"
# for seedUser in $UsersList; do
	# serviice rtorrent-$seedUser stop
# done

#### 9 - PHP
echo -e -n "${CBLUE}Some fixes for PHP$CEND..."
screen -dmS PHP /bin/bash /etc/MySB/install/PHP.bsh 'UPGRADE';
WaitingScreen PHP
StatusSTD

#### 10 - Postfix
echo -e -n "${CBLUE}Some fixes for Postfix$CEND..."
screen -dmS Postfix /bin/bash /etc/MySB/install/Postfix.bsh 'UPGRADE';
WaitingScreen Postfix
StatusSTD

#### 11 - NginX
echo -e -n "${CBLUE}Some fixes for NginX$CEND..."
screen -dmS Nginx /bin/bash /etc/MySB/install/Nginx.bsh 'UPGRADE';
WaitingScreen Nginx
StatusSTD

#### 13 - Refresh tools
echo -e -n "${CBLUE}Refresh some tools (ruTorrent, Manager, Cakebox)$CEND..."
ScriptInvoke 'screen' '/etc/MySB/bin/MySB_RefreshMe' 'all'
StatusSTD

#### 14 - Samba
if [ "$IsInstalled_OpenVPN" == "YES" ]; then
	echo -e -n "${CBLUE}Some fixes for Samba$CEND..."
	sqlite3 $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'Samba';"
	screen -dmS Samba /bin/bash /etc/MySB/install/Samba.bsh 'UPGRADE';	
	WaitingScreen Samba
	StatusSTD
fi

#### 15 - Fail2Ban
if [ "$IsInstalled_Fail2Ban" == "YES" ]; then
	echo -e -n "${CBLUE}Some fixes for Fail2Ban$CEND..."
	sqlite3 $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'Fail2Ban';"
	screen -dmS Fail2Ban /bin/bash /etc/MySB/install/Fail2Ban.bsh 'UPGRADE';
	WaitingScreen Fail2Ban
	StatusSTD
fi

#### 16 - LogWatch
if [ "$IsInstalled_LogWatch" == "YES" ]; then
	echo -e -n "${CBLUE}Some fixes for Logwatch$CEND..."
	sqlite3 $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'LogWatch';"
	screen -dmS Logwatch /bin/bash /etc/MySB/install/Logwatch.bsh 'UPGRADE';
	WaitingScreen Logwatch
	StatusSTD
fi

#### 17 - DNScrypt-proxy
if [ "$IsInstalled_DNScrypt" == "YES" ]; then
	echo -e -n "${CBLUE}Some fixes for DNScrypt-proxy$CEND..."
	sqlite3 $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'DNScrypt-proxy';"
	screen -dmS DNScrypt /bin/bash /etc/MySB/install/DNScrypt.bsh 'UPGRADE';
	WaitingScreen DNScrypt
	StatusSTD
fi

#### 18 - rTorrent Blocklists
echo -e -n "${CBLUE}Compile blocklists for rTorrent$CEND..."
screen -dmS Blocklist /bin/bash /etc/MySB/install/Blocklists.bsh 'UPGRADE';
WaitingScreen Blocklist
StatusSTD

#### 19 - PeerGuardian
if [ "$IsInstalled_PeerGuardian" == "YES" ]; then
	echo -e -n "${CBLUE}Some fixes for PeerGuardian$CEND..."
	sqlite3 $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'PeerGuardian';"
	screen -dmS PeerGuardian /bin/bash /etc/MySB/install/PeerGuardian.bsh 'UPGRADE';
	WaitingScreen PeerGuardian
	StatusSTD
fi

#### Certificates
echo -e -n "${CBLUE}Some fixes for Certificates$CEND..."
chmod 644 /etc/MySB/ssl/*.cert &> /dev/null
StatusSTD

#### OpenVPN
if [ "$IsInstalled_OpenVPN" == "YES" ]; then
	echo -e -n "${CBLUE}Some fixes for OpenVPN$CEND..."
	sed -i '/DNS 8.8.8.8/d' /etc/openvpn/Server_TUN_WithGW.conf
	sed -i "s/DNS 8.8.4.4/DNS 10.0.0.1/g" /etc/openvpn/Server_TUN_WithGW.conf
	sed -i '/DNS 8.8.8.8/d' /etc/openvpn/Server_TUN_WithoutGW.conf
	sed -i '/DNS 8.8.4.4/d' /etc/openvpn/Server_TUN_WithoutGW.conf
	StatusSTD
fi

#### Crontab
echo -e -n "${CBLUE}Some fixes for Crontab$CEND..."
crontab -l > /tmp/crontab.tmp
for seedUser in $UsersList; do
	sed -i '/'$seedUser'/d' /tmp/crontab.tmp
	echo "5 * * * * if ! ( /bin/ps U $seedUser | grep rtorrent &> /dev/null ); then /etc/init.d/rtorrent-$seedUser restart &> /dev/null; fi" >> /tmp/crontab.tmp
	echo "0 12 1 * * /bin/bash /etc/MySB/scripts/PaymentReminder.bsh $seedUser CRON &> /dev/null" >> /tmp/crontab.tmp
done
crontab /tmp/crontab.tmp
rm -f /tmp/crontab.tmp
StatusSTD

#### rTorrent (.rtorrent.rc)
for seedUser in $UsersList; do
	echo -e -n "${CBLUE}Stopping rTorrent process for $seedUser$CEND..."
	service rtorrent-$seedUser stop
	StatusSTD

	echo -e -n "${CBLUE}Creating new '.rtorrent.rc' file for $seedUser$CEND..."
	HOMEDIR_ESCAPED=`echo /home/$seedUser | sed s,/,\\\\\\\\\\/,g`
	SCGIPORT="`sqlite3 $MySB_DB \"SELECT scgi_port FROM users WHERE users_ident = '$seedUser'\"`"
	NETWORKPORT="`sqlite3 $MySB_DB \"SELECT rtorrent_port FROM users WHERE users_ident = '$seedUser'\"`"	

	cp /home/$seedUser/.rtorrent.rc /home/$seedUser/.rtorrent.rc.bckp_v1.1_to_v1.2
	cp /etc/MySB/templates/rtorrent.rc.template /home/$seedUser/.rtorrent.rc
	perl -pi -e "s/<server_ip>/$SrvIpAddress/g" /home/$seedUser/.rtorrent.rc
	perl -pi -e "s/<username>/$seedUser/g" /home/$seedUser/.rtorrent.rc
	perl -pi -e "s/<homedir>/$HOMEDIR_ESCAPED/g" /home/$seedUser/.rtorrent.rc
	perl -pi -e "s/<scgi_port>/$SCGIPORT/g" /home/$seedUser/.rtorrent.rc
	perl -pi -e "s/<port_range>/$NETWORKPORT-$NETWORKPORT/g" /home/$seedUser/.rtorrent.rc

	if [ "$MySB_PeerBlock" == "rTorrent" ]; then
		perl -pi -e "s/#{1}ipv4_filter.load/ipv4_filter.load/g" /home/$seedUser/.rtorrent.rc
		perl -pi -e "s/#{1}print/print/g" /home/$seedUser/.rtorrent.rc
		perl -pi -e "s/#{1}schedule=load_filter/schedule=load_filter/g" /home/$seedUser/.rtorrent.rc
	fi

	case "$FILESYSTEMTYPE" in
		"ext4"|"xfs"|"btrfs")
			perl -pi -e "s/system.file_allocate.set = no/system.file_allocate.set = yes/g" /home/$seedUser/.rtorrent.rc
		;;
		*)
			perl -pi -e "s/^system.file_allocate.set = yes/system.file_allocate.set = no/g" /home/$seedUser/.rtorrent.rc
		;;
	esac
	StatusSTD
	
	echo -e -n "${CBLUE}Starting rTorrent process for $seedUser$CEND..."
	service rtorrent-$seedUser start
	StatusSTD	
done

#### Create directories & change rights
echo -e -n "${CBLUE}Force owners and rights for files and directories$CEND..."
ManageDirectoriesAndFiles
StatusSTD

#### LogWatch
# if [ -f /etc/logwatch/conf/logwatch.conf ]; then
	# echo -e -n "${CBLUE}Some fixes for LogWatch$CEND..."
	# perl -pi -e "s/^Range = All/Range = yesterday/g" /etc/logwatch/conf/logwatch.conf
	# perl -pi -e "s/^Detail = High/Detail = Low/g" /etc/logwatch/conf/logwatch.conf
	# StatusSTD
# fi

#### Cleaning
rm -rf /etc/MySB/temp/* &> /dev/null

#### START services
ManageServices start "cron nginx"

#### Firewall And Security
echo -e -n "${CBLUE}Update security rules$CEND..."
ScriptInvoke 'screen' '/etc/MySB/scripts/FirewallAndSecurity.bsh' 'new' 'UPGRADE'
StatusSTD

#### Send mail for each user with new version
for seedUser in $UsersList; do
	echo -e -n "${CBLUE}Send mail for $seedUser$CEND..."
	MonthlyPayment "$seedUser"
	StatusSTD
done

clear
echo -e "${CGREEN}Upgrade finished succesfully !$CEND"
echo

# -----------------------------------------
source /etc/MySB/inc/includes_after.bsh
# -----------------------------------------
##################### LAST LINE ######################################