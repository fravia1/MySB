#!/bin/bash 
# -----------------------------------------
source /etc/MySB/inc/includes_before
# -----------------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

echo
echo -e "${CRED}If you lose connection during installation, restart the SSH session and run the following command:$CEND"
echo -e "${CGREEN}	screen -r MySB_UpgradeMe$CEND"
echo
echo -e "${CYELLOW}All users password will be changed by temporary password.$CEND"
echo
QuestionGetString NO  "Type 'yes' to continue or 'no' to abort ?" CONTINUE YES
if [ "$CONTINUE" == "NO" ]; then
	EndingScript 0
fi

#### Count steps
echo
CurrentSTEP=0
TotalSTEP=24

if [ "$IsInstalled_OpenVPN" == "YES" ]; then
	TotalSTEP=$(( TotalSTEP+3 ))
fi
if [ "$IsInstalled_Fail2Ban" == "YES" ]; then
	(( TotalSTEP++ ))
fi
if [ "$IsInstalled_LogWatch" == "YES" ]; then
	(( TotalSTEP++ ))
fi
if [ "$IsInstalled_DNScrypt" == "YES" ]; then
	(( TotalSTEP++ ))
fi
if [ "$IsInstalled_PeerGuardian" == "YES" ]; then
	(( TotalSTEP++ ))
fi

#### 1 - Create missing directories and DBs
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Creating missing directories, databases and change owners and rights$CEND..."
ManageDirectoriesAndFiles
StatusSTD

#### 2 - Move some files & directories
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Moving and deleting some files & directories$CEND..."
if [ -f /etc/MySB/logs/From_v1.0-to-v1.1.bsh.log ]; then rm -f /etc/MySB/logs/From_v1.0-to-v1.1.bsh.log; fi
if [ -f /etc/MySB/logs/Blocklist.log ]; then mv /etc/MySB/logs/Blocklist.log /etc/MySB/logs/Blocklists.log; fi
if [ -f /etc/MySB/logs/BlockList.sh.log ]; then mv /etc/MySB/logs/BlockList.sh.log /etc/MySB/logs/BlocklistsRTorrent.bsh.log; fi
if [ -f /etc/MySB/logs/Bridge-Start.sh.log ]; then rm -f /etc/MySB/logs/Bridge-Start.sh.log; fi
if [ -f /etc/MySB/logs/Bridge-Stop.sh.log ]; then rm -f /etc/MySB/logs/Bridge-Stop.sh.log; fi
if [ -f /etc/MySB/logs/CreateDir.log ]; then rm -f /etc/MySB/logs/CreateDir.log; fi
if [ -f /etc/MySB/logs/FirewallAndSecurity.sh.log ]; then mv /etc/MySB/logs/FirewallAndSecurity.sh.log /etc/MySB/logs/FirewallAndSecurity.bsh.log; fi
if [ -f /etc/MySB/logs/GetTrackersCert.sh.log ]; then mv /etc/MySB/logs/GetTrackersCert.sh.log /etc/MySB/logs/GetTrackersCert.bsh.log; fi
if [ -f /etc/MySB/logs/LogServer.sh.log ]; then mv /etc/MySB/logs/LogServer.sh.log /etc/MySB/logs/LogServer.bsh.log; fi
if [ -f /etc/MySB/logs/MySB_Install.sh.log ]; then mv /etc/MySB/logs/MySB_Install.sh.log /etc/MySB/logs/MySB_Install.bsh.log; fi
if [ -f /etc/MySB/logs/PaymentReminder.sh.log ]; then mv /etc/MySB/logs/PaymentReminder.sh.log /etc/MySB/logs/PaymentReminder.bsh.log; fi
if [ -f /etc/MySB/logs/ruTorrent_GetTrackersCert.sh.invoked.log ]; then rm -f /etc/MySB/logs/ruTorrent_GetTrackersCert.sh.invoked.log; fi
if [ -f /etc/MySB/logs/UpdateGeoIP.sh.log ]; then mv /etc/MySB/logs/UpdateGeoIP.sh.log /etc/MySB/logs/UpdateGeoIP.bsh.log; fi
rm -f /etc/MySB/web/logs/*.html &> /dev/null
if [ -f /etc/MySB/web/logs/install/BlockList.sh-log.html ]; then mv /etc/MySB/web/logs/install/BlockList.sh-log.html /etc/MySB/web/logs/install/BlocklistsRTorrent.bsh-log.html; fi
if [ -f /etc/MySB/web/logs/install/Bridge-Start.sh-log.html ]; then rm -f /etc/MySB/web/logs/install/Bridge-Start.sh-log.html; fi
if [ -f /etc/MySB/web/logs/install/Bridge-Stop.sh-log.html ]; then rm -f /etc/MySB/web/logs/install/Bridge-Stop.sh-log.html; fi
if [ -f /etc/MySB/web/logs/install/CreateDir-log.html ]; then rm -f /etc/MySB/web/logs/install/CreateDir-log.html; fi
if [ -f /etc/MySB/web/logs/install/FirewallAndSecurity.sh-log.html ]; then mv /etc/MySB/web/logs/install/FirewallAndSecurity.sh-log.html /etc/MySB/web/logs/install/FirewallAndSecurity.bsh-log.html; fi
if [ -f /etc/MySB/web/logs/install/GetTrackersCert.sh-log.html ]; then mv /etc/MySB/web/logs/install/GetTrackersCert.sh-log.html /etc/MySB/web/logs/install/GetTrackersCert.bsh-log.html; fi
if [ -f /etc/MySB/web/logs/install/LogServer.sh-log.html ]; then mv /etc/MySB/web/logs/install/LogServer.sh-log.html /etc/MySB/web/logs/install/LogServer.bsh-log.html; fi
if [ -f /etc/MySB/web/logs/install/MySB_Install.sh-log.html ]; then mv /etc/MySB/web/logs/install/MySB_Install.sh-log.html /etc/MySB/web/logs/install/MySB_Install.bsh-log.html; fi
if [ -f /etc/MySB/web/logs/install/PaymentReminder.sh-log.html ]; then mv /etc/MySB/web/logs/install/PaymentReminder.sh-log.html /etc/MySB/web/logs/install/PaymentReminder.bsh-log.html; fi
if [ -f /etc/MySB/web/logs/install/ruTorrent_GetTrackersCert.sh.invoked-log.html ]; then rm -f /etc/MySB/web/logs/install/ruTorrent_GetTrackersCert.sh.invoked-log.html; fi
if [ -f /etc/MySB/web/logs/install/UpdateGeoIP.sh-log.html ]; then mv /etc/MySB/web/logs/install/UpdateGeoIP.sh-log.html /etc/MySB/web/logs/install/UpdateGeoIP.bsh-log.html; fi
if [ -f /etc/MySB/web/logs/scripts/BlockList.sh-log.html ]; then mv /etc/MySB/web/logs/scripts/BlockList.sh-log.html /etc/MySB/web/logs/scripts/BlocklistsRTorrent.bsh-log.html; fi
if [ -f /etc/MySB/web/logs/scripts/FirewallAndSecurity.sh-log.html ]; then mv /etc/MySB/web/logs/scripts/FirewallAndSecurity.sh-log.html /etc/MySB/web/logs/scripts/FirewallAndSecurity.bsh-log.html; fi
if [ -f /etc/MySB/web/logs/scripts/GetTrackersCert.sh-log.html ]; then mv /etc/MySB/web/logs/scripts/GetTrackersCert.sh-log.html /etc/MySB/web/logs/scripts/GetTrackersCert.bsh-log.html; fi
if [ -f /etc/MySB/web/logs/scripts/LogServer.sh-log.html ]; then mv /etc/MySB/web/logs/scripts/LogServer.sh-log.html /etc/MySB/web/logs/scripts/LogServer.bsh-log.html; fi
if [ -f /root/2 ]; then rm -f /root/2 &> /dev/null; fi
if [ -f /root/033* ]; then rm -f /root/033* &> /dev/null; fi
if [ -f /root/MySB_Install.sh ]; then rm -f /root/MySB_Install.sh &> /dev/null; fi
if [ -f /usr/share/nginx/html/50x.html ]; then rm -f /usr/share/nginx/html/50x.html &> /dev/null; fi
if [ -d /etc/MySB/scripts/blocklist ]; then mv /etc/MySB/scripts/blocklist /etc/MySB/files/blocklists; fi
if [ -d /usr/share/nginx/html/seedbox-manager ]; then mv /usr/share/nginx/html/seedbox-manager /etc/MySB/web/; fi
if [ -d /usr/share/nginx/html/rutorrent ]; then mv /usr/share/nginx/html/rutorrent /etc/MySB/web/; fi
if [ -d /usr/share/nginx/html/Cakebox-light ]; then mv /usr/share/nginx/html/Cakebox-light /etc/MySB/web/; fi
rm -rf /etc/MySB/temp/* &> /dev/null
rm -rf /etc/MySB/files/* &> /dev/null
rm -rf /etc/MySB/sources/* &> /dev/null
# Delete old crontab
crontab -l > /tmp/crontab.tmp
sed -i '/webmin\/package-updates/d' /tmp/crontab.tmp
sed -i '/ldconfig/d' /tmp/crontab.tmp
sed -i '/drop_caches/d' /tmp/crontab.tmp
sed -i '/BlockList/d' /tmp/crontab.tmp
crontab /tmp/crontab.tmp
rm -f /tmp/crontab.tmp
StatusSTD

#### 3 - Sources List
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Preparing sources debian$CEND..."
screen -dmS SourcesList /bin/bash /etc/MySB/install/SourcesList 'UPGRADE';
WaitingScreen SourcesList
StatusSTD

#### 4 - Packages
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Installing all needed packages$CEND..."
screen -dmS Packages /bin/bash /etc/MySB/install/Packages 'UPGRADE';
WaitingScreen Packages
StatusSTD

#### 5 - SQLite (move flat files to database)
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Creating and populating databases, and check of all the trackers (this may take a while, please be patient)$CEND..."
screen -dmS SQLite /bin/bash /etc/MySB/install/SQLite 'UPGRADE';
WaitingScreen SQLite
StatusSTD

#### 6 - Vars
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Reading database informations$CEND..."
if [ -f /etc/MySB/inc/vars ]; then source /etc/MySB/inc/vars; fi
if [ -f /etc/MySB/inc/funcs ]; then source /etc/MySB/inc/funcs; fi
ListingUsers
StatusSTD

#### 7 - Tweaks
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - System optimizations$CEND..."
screen -dmS Tweaks /bin/bash /etc/MySB/install/Tweaks 'UPGRADE';
WaitingScreen Tweaks
StatusSTD

#### 8 - STOP services
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Stopping of services$CEND..."
ManageServices stop "cron" &> /dev/null
for seedUser in $UsersList; do
	service rtorrent-$seedUser stop &> /dev/null
done
StatusSTD

#### 9 - PHP
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Installing and configuring PHP5$CEND..."
screen -dmS PHP /bin/bash /etc/MySB/install/PHP 'UPGRADE';
WaitingScreen PHP
StatusSTD

#### 10 - NginX
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Installing and configuring NginX$CEND..."
screen -dmS Nginx /bin/bash /etc/MySB/install/Nginx 'UPGRADE';
WaitingScreen Nginx
StatusSTD

#### 11 - DNScrypt-proxy
if [ "$IsInstalled_DNScrypt" == "YES" ]; then
	(( CurrentSTEP++ ))
	echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Installing and configuring DNScrypt-proxy$CEND..."
	sqlite3 $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'DNScrypt-proxy';"
	screen -dmS DNScrypt /bin/bash /etc/MySB/install/DNScrypt 'UPGRADE';
	WaitingScreen DNScrypt
	StatusSTD
fi

#### 12 - PeerGuardian
if [ "$IsInstalled_PeerGuardian" == "YES" ]; then
	(( CurrentSTEP++ ))
	echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Installing and configuring PeerGuardian$CEND..."
	sqlite3 $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'PeerGuardian';"
	screen -dmS PeerGuardian /bin/bash /etc/MySB/install/PeerGuardian 'UPGRADE';
	WaitingScreen PeerGuardian
	StatusSTD
fi

#### 13 - Postfix
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Installing and configuring Postfix$CEND..."
screen -dmS Postfix /bin/bash /etc/MySB/install/Postfix 'UPGRADE';
WaitingScreen Postfix
StatusSTD

#### 14 - Backup users data
# ruTorrent
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Backups of users data$CEND..."
mv $RutorrentDir/conf/users /etc/MySB/temp/conf_users &> /dev/null && rm -rf /etc/MySB/temp/conf_users/.svn &> /dev/null
mv $RutorrentDir/share/users /etc/MySB/temp/share_users &> /dev/null && rm -rf /etc/MySB/temp/share_users/.svn &> /dev/null
rm -rf $RutorrentDir &> /dev/null
# Seedbox-Manager
if [ -d $ManagerDir ]; then rm -rf $ManagerDir &> /dev/null; fi
# Cackebox
if [ -d $CakeboxDir ]; then rm -rf $CakeboxDir &> /dev/null; fi
StatusSTD

#### 15 - DownloadAll (update)
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Downloading all files at once (GIT, SVN, TAR.GZ, WBM)$CEND..."
screen -dmS DownloadAll /bin/bash /etc/MySB/install/DownloadAll 'UPGRADE';
WaitingScreen DownloadAll
StatusSTD

#### 16 - Refresh tools
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Refresh some tools (ruTorrent, Manager, Cakebox)$CEND..."
screen -dmS MySB_RefreshMe /bin/bash /etc/MySB/bin/MySB_RefreshMe 'all';	
WaitingScreen MySB_RefreshMe
StatusSTD

#### 17 - Restore users data
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Restoring user data$CEND..."
for seedUser in $UsersList; do
	mv /etc/MySB/temp/conf_users/$seedUser/plugins/stream/config.php $RutorrentDir/conf/users/$seedUser/plugins/stream/ &> /dev/null
	rm -rf $RutorrentDir/share/users/$seedUser &> /dev/null
done
rm -rf /etc/MySB/temp/conf_users &> /dev/null
rsync -av /etc/MySB/temp/share_users/ $RutorrentDir/share/users/ &> /dev/null && rm -rf /etc/MySB/temp/share_users &> /dev/null
StatusSTD

#### 18 - Samba & NFS
if [ "$IsInstalled_OpenVPN" == "YES" ]; then
	(( CurrentSTEP++ ))
	echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Installing and configuring Samba$CEND..."
	sqlite3 $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'Samba';"
	screen -dmS Samba /bin/bash /etc/MySB/install/Samba 'UPGRADE';	
	WaitingScreen Samba
	StatusSTD
	
	(( CurrentSTEP++ ))
	echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Installing and configuring NFS$CEND..."
	sqlite3 $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'NFS';"
	screen -dmS NFS /bin/bash /etc/MySB/install/NFS 'UPGRADE';
	WaitingScreen NFS
	StatusSTD	
fi

#### 19 - Fail2Ban
if [ "$IsInstalled_Fail2Ban" == "YES" ]; then
	(( CurrentSTEP++ ))
	echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Installing and configuring Fail2Ban$CEND..."
	sqlite3 $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'Fail2Ban';"
	screen -dmS Fail2Ban /bin/bash /etc/MySB/install/Fail2Ban 'UPGRADE';
	WaitingScreen Fail2Ban
	StatusSTD
fi

#### 20 - LogWatch
if [ "$IsInstalled_LogWatch" == "YES" ]; then
	(( CurrentSTEP++ ))
	echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Installing and configuring Logwatch$CEND..."
	sqlite3 $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'LogWatch';"
	screen -dmS Logwatch /bin/bash /etc/MySB/install/Logwatch 'UPGRADE';
	WaitingScreen Logwatch
	StatusSTD
fi

#### 21 - rTorrent Blocklists
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Compiling the rTorrent blocklist$CEND..."
screen -dmS Blocklist /bin/bash /etc/MySB/install/Blocklists 'UPGRADE';
WaitingScreen Blocklist
StatusSTD

#### 22 - Certificates
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Some fixes for Certificates$CEND..."
chmod 644 /etc/MySB/ssl/*.cert &> /dev/null
StatusSTD

#### 23 - OpenVPN
if [ "$IsInstalled_OpenVPN" == "YES" ]; then
	(( CurrentSTEP++ ))
	echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Some fixes for OpenVPN$CEND..."
	sed -i '/DNS 8.8.8.8/d' /etc/openvpn/Server_TUN_WithGW.conf
	sed -i "s/DNS 8.8.4.4/DNS 10.0.0.1/g" /etc/openvpn/Server_TUN_WithGW.conf
	sed -i '/DNS 8.8.8.8/d' /etc/openvpn/Server_TUN_WithoutGW.conf
	sed -i '/DNS 8.8.4.4/d' /etc/openvpn/Server_TUN_WithoutGW.conf
	StatusSTD
fi

#### 24 - Crontab
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Some fixes for Crontab$CEND..."
crontab -l > /tmp/crontab.tmp
for seedUser in $UsersList; do
	sed -i '/'$seedUser'/d' /tmp/crontab.tmp
	echo "5 * * * * if ! ( /bin/ps U $seedUser | grep rtorrent &> /dev/null ); then /etc/init.d/rtorrent-$seedUser restart &> /dev/null; fi" >> /tmp/crontab.tmp
	echo "0 12 1 * * /bin/bash /etc/MySB/scripts/PaymentReminder.bsh $seedUser CRON &> /dev/null" >> /tmp/crontab.tmp
done
crontab /tmp/crontab.tmp
rm -f /tmp/crontab.tmp
StatusSTD

#### 25 - rTorrent (.rtorrent.rc)
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Creating new '.rtorrent.rc' file for all users$CEND..."
for seedUser in $UsersList; do
	service rtorrent-$seedUser stop &> /dev/null

	HOMEDIR_ESCAPED=`echo /home/$seedUser | sed s,/,\\\\\\\\\\/,g`
	SCGIPORT="`sqlite3 $MySB_DB \"SELECT scgi_port FROM users WHERE users_ident = '$seedUser'\"`"
	NETWORKPORT="`sqlite3 $MySB_DB \"SELECT rtorrent_port FROM users WHERE users_ident = '$seedUser'\"`"	

	cp /home/$seedUser/.rtorrent.rc /home/$seedUser/.rtorrent.rc.bckp_v1.1_to_v1.2
	cp /etc/MySB/templates/rtorrent.rc.template /home/$seedUser/.rtorrent.rc
	perl -pi -e "s/<server_ip>/$SrvIpAddress/g" /home/$seedUser/.rtorrent.rc
	perl -pi -e "s/<username>/$seedUser/g" /home/$seedUser/.rtorrent.rc
	perl -pi -e "s/<homedir>/$HOMEDIR_ESCAPED/g" /home/$seedUser/.rtorrent.rc
	perl -pi -e "s/<scgi_port>/$SCGIPORT/g" /home/$seedUser/.rtorrent.rc
	perl -pi -e "s/<port_range>/$NETWORKPORT-$NETWORKPORT/g" /home/$seedUser/.rtorrent.rc

	if [ "$MySB_PeerBlock" == "rTorrent" ]; then
		perl -pi -e "s/#{1}ipv4_filter.load/ipv4_filter.load/g" /home/$seedUser/.rtorrent.rc
		perl -pi -e "s/#{1}print/print/g" /home/$seedUser/.rtorrent.rc
		perl -pi -e "s/#{1}schedule=load_filter/schedule=load_filter/g" /home/$seedUser/.rtorrent.rc
	fi

	case "$FILESYSTEMTYPE" in
		"ext4"|"xfs"|"btrfs")
			perl -pi -e "s/system.file_allocate.set = no/system.file_allocate.set = yes/g" /home/$seedUser/.rtorrent.rc
		;;
		*)
			perl -pi -e "s/^system.file_allocate.set = yes/system.file_allocate.set = no/g" /home/$seedUser/.rtorrent.rc
		;;
	esac

	service rtorrent-$seedUser start &> /dev/null	
done
StatusSTD

#### 26 - Cleaning
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Cleaning$CEND..."
rm -rf /etc/MySB/temp/* &> /dev/null
StatusSTD

#### 27 - Vars (again)
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Read database informations$CEND..."
if [ -f /etc/MySB/inc/vars ]; then source /etc/MySB/inc/vars; fi
if [ -f /etc/MySB/inc/funcs ]; then source /etc/MySB/inc/funcs; fi
ListingUsers
StatusSTD

#### 28 - Firewall And Security
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Creating basic security rules$CEND..."
ScriptInvoke 'screen' '/etc/MySB/scripts/FirewallAndSecurity.bsh' 'new' 'UPGRADE'
StatusSTD

#### 29 - STOP & START services
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Restarting all services$CEND..."
ManageServices stop "stunnel4 postfix" &> /dev/null
ManageServices start "cron nginx openvpn stunnel4 postfix" &> /dev/null
StatusSTD

#### 30 - Send mail for each user with new version
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP - Clearing the password for all users$CEND..."
for seedUser in $UsersList; do
	UserId=$(sqlite3 $MySB_DB "SELECT id_users FROM users WHERE users_ident = '$seedUser'")
	UserPassword="`sqlite3 $MySB_DB \"SELECT users_passwd FROM users WHERE users_ident = '$seedUser'\"`"
	sqlite3 $MySB_DB "DELETE FROM users_addresses WHERE id_users = '$UserId'"

	#### Erase all users passwords
	ScriptInvoke "screen" "/etc/MySB/bin/MySB_ChangeUserPassword" "$seedUser" "$UserPassword" "UPGRADE"
done
StatusSTD

clear
echo -e "${CGREEN}Upgrade finished succesfully !$CEND"
echo
QuestionGetString NO  "Do you want to reboot your seedbox now (recommended) ?" REBOOT YES

# -----------------------------------------
source /etc/MySB/inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################