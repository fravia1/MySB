#!/bin/bash 
# ----------------------------------
source /etc/MySB/inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################
#
# Usage:	MySB_SecurityRules {clean|new}
#
##################### FIRST LINE #####################################

# 1 - Clean all
# 2 - Create new
# 3 - Refresh
#	* NginX
#	* PeerGuardian
#	* Fail2Ban
#	* Iptables

#### VARs
ListingUsers #($UsersList)

SeedboxUsersIPs=`echo $SeedboxUsersIPs | sed s,/,\\\\\\\\\\/,g`	
SeedboxUsersIPs=$(echo "$SeedboxUsersIPs"|tr " " "\n"|sort|uniq|tr "\n" " ") # sort as uniq
MainUserIPs=`echo $MainUserIPs | sed s,/,\\\\\\\\\\/,g`
MainUserIPs=$(echo "$MainUserIPs"|tr " " "\n"|sort|uniq|tr "\n" " ") # sort as uniq
AllUsersIPs="${SeedboxUsersIPs} ${MainUserIPs}"

ServicesToRestart=""

ApplyNginx=false
ApplyBind=false
ApplyFail2Ban=false
ApplyPGL=false
ApplyDnscrypt=false
#### VARs


#### Check arguments options
if [ $# -gt 1 ]; then
	for Arg in "$@"; do
		case "$Arg" in
			--full)
				ApplyNginx=true
				if CheckCommand 0 named; then
					ApplyBind=true
				fi
				if [ "$IsInstalled_PeerGuardian" == "YES" ]; then
					ApplyPGL=true
				fi
				if [ "$IsInstalled_Fail2Ban" == "YES" ]; then
					ApplyFail2Ban=true
				fi
				if [ "$IsInstalled_DNScrypt" == "true" ]; then
					ApplyDnscrypt=true
				fi
			;;
			--iptables)
				
			;;
			--pgl)
				if [ "$IsInstalled_PeerGuardian" == "YES" ]; then
					ApplyPGL=true
				fi
			;;
			--nginx)
				ApplyNginx=true
			;;
			--dnscrypt)
				if [ "$IsInstalled_DNScrypt" == "true" ]; then
					ApplyDnscrypt=true
				fi
			;;			
			--bind)
				if CheckCommand 0 named; then
					ApplyBind=true
				fi
			;;
			--fail2ban)
				if [ "$IsInstalled_Fail2Ban" == "YES" ]; then
					ApplyFail2Ban=true
				fi
			;;
		esac
	done
fi

if [ "$ApplyNginx" == "true" ]; then
	ServicesToRestart="${ServicesToRestart} nginx"
fi
if [ "$ApplyBind" == "true" ]; then
	AllTrackersDomain="`sqlite3 $MySB_DB \"SELECT tracker_domain FROM trackers_list WHERE is_active = '0' AND to_check = '0'\"`"
	ServicesToRestart="${ServicesToRestart} bind9"
fi
if [ "$IsInstalled_DNScrypt" == "YES" ] && ! GetPid dnscrypt-proxy; then
	ServicesToRestart="${ServicesToRestart} dnscrypt-proxy"	
fi
if [ "$ApplyFail2Ban" == "true" ]; then
	ServicesToRestart="${ServicesToRestart} fail2ban"
fi
if [ "$IsInstalled_PeerGuardian" == "YES" ]; then
	ServicesToRestart="${ServicesToRestart} pglcmd"
fi
#### Check arguments options

#### Functions
CreateServicesRules() {
	for FnUser in $UsersList; do
		log_daemon_msg "NginX - Allow the IP addresses of $FnUser"
		UserId="`sqlite3 $MySB_DB \"SELECT id_users FROM users WHERE users_ident = '$FnUser'\"`"
		UserIPs="`sqlite3 $MySB_DB \"SELECT ipv4 FROM users_addresses WHERE is_active = '1' AND id_users = '$UserId'\" | sed -e 's/^ //g;' | sed 's/\s+$//'`"
		
		#### NginX
		if [ "$ApplyNginx" == "true" ]; then
			echo "	# Restricted IP for $FnUser" >> /etc/nginx/conf.d/ip_restriction
			for IPv4 in $UserIPs; do
				echo "	allow $IPv4;" >> /etc/nginx/conf.d/ip_restriction
			done
			unset IPv4
			StatusLSB
		fi
		#### NginX
	done

	#### NginX
	if [ "$ApplyNginx" == "true" ]; then		
		if [ "$IsInstalled_OpenVPN" == "YES" ]; then
			# OpenVPN local IP addresses
			log_daemon_msg "NginX - Allow the IP addresses of OpenVPN users"
			echo "	# Restricted IP for OpenVPN users" >> /etc/nginx/conf.d/ip_restriction
			for IPv4 in $VpnIPs; do
				echo "	allow $IPv4;" >> /etc/nginx/conf.d/ip_restriction
			done
			unset IPv4
			StatusLSB
		fi
		
		# Loopback
		log_daemon_msg "NginX - Allow the loopback interface"
		echo "	# Localhost" > /etc/nginx/conf.d/ip_restriction
		echo "	allow 127.0.0.1;" >> /etc/nginx/conf.d/ip_restriction
		StatusLSB
		
		# Deny all others
		echo "	# Deny all others" >> /etc/nginx/conf.d/ip_restriction
		echo "	deny all;" >> /etc/nginx/conf.d/ip_restriction
	fi
	#### NginX

	#### BIND
	if [ "$ApplyBind" == "true" ]; then
		log_daemon_msg "Bind - Block all outgoing request for inactive trackers"
		AllTrackersDomain="`sqlite3 $MySB_DB \"SELECT tracker_domain FROM trackers_list WHERE is_active = '0' AND to_check = '0'\"`"
		echo "#### MySB - Blacklisted domains (ex: inactive trackers)" > /etc/bind/MySB.zones.blakclists
		for TrackerDomain in $AllTrackersDomain; do
			echo "zone \"$TrackerDomain\" { type master; file \"/etc/bind/db.empty\"; };" >> /etc/bind/MySB.zones.blakclists
		done
		perl -pi -e "s/^#include \"\/etc\/bind\/MySB.zones.blakclists\";/include \"\/etc\/bind\/MySB.zones.blakclists\";/g" /etc/bind/named.conf.local
		StatusLSB
	fi
	#### BIND

	#### Fail2Ban
	if [ "$ApplyFail2Ban" == "YES" ]; then
		Fail2BanWhitheList 1
	fi
	#### Fail2Ban

	#### PeerGuardian
	if [ "$ApplyPGL" == "YES" ]; then
		# Create '/etc/pgl/pglcmd.conf'
		PeerGuardianPglcmdConf 0
		# Create '/etc/pgl/allow.p2p'
		PeerGuardianAllowP2P 0
		# Create '/etc/pgl/blocklists.list'
		PeerGuardianBlocklistsList 0 "CreateFile"
	fi
	#### PeerGuardian
}
#### Functions


#### Begin
case $1 in
	"clean")
		#### STOP services
		ManageServices stop "pglcmd fail2ban"
		#### STOP services
		
		#### IPtables - Removal of existing rules
		log_daemon_msg "IPtables - Removal of existing rules"
		FlushingTables
		StatusLSB
		#### IPtables - Removal of existing rules
		
		#### NginX - Satisfy all
		log_daemon_msg "NginX - Satisfy all"
		echo "	# Allow any one" >> /etc/nginx/conf.d/ip_restriction
		echo "	satisfy all;" > /etc/nginx/conf.d/ip_restriction
		StatusLSB
		#### NginX - Satisfy all
		
		#### Bind - Unblock inactive tracker domains
		log_daemon_msg "Bind - Unblock inactive tracker domains"
		perl -pi -e "s/^include \"\/etc\/bind\/MySB.zones.blakclists\";/#include \"\/etc\/bind\/MySB.zones.blakclists\";/g" /etc/bind/named.conf.local
		StatusLSB
		#### Bind - Unblock inactive tracker domains
		
		#### START services
		ManageServices start "nginx bind9"
		#### START services		
	;;
	
	"create")
		#### STOP services
		ManageServices stop "pglcmd fail2ban"
		#### STOP services

		#### Kernel - Loading modules
		log_daemon_msg "Kernel - Loading modules"
		LoadingKernelModules
		StatusLSB
		#### Kernel - Loading modules

		#### Kernel - Parameter Configuration
		log_daemon_msg "Kernel - Parameter Configuration"
		KernelParameterConfiguration
		StatusLSB
		#### Kernel - Parameter Configuration
		
		#### IPtables - Removal of existing rules
		log_daemon_msg "IPtables - Removal of existing rules"
		FlushingTables
		StatusLSB
		#### IPtables - Removal of existing rules

		#### IPtables - Prohibit any incoming/outgoing connections
		log_daemon_msg "IPtables - Prohibit any incoming/outgoing connections"
		iptables -P INPUT DROP
		iptables -P FORWARD DROP
		iptables -P OUTPUT DROP
		StatusLSB
		#### IPtables - Prohibit any incoming/outgoing connections
		
		#### IPtables - Creating user chains
		log_daemon_msg "IPtables - Creating user chains"
		CreatingUserChain
		StatusLSB
		#### IPtables - Creating user chains
		
		#### IPtables - Populating user chains
		log_daemon_msg "IPtables - Populating BAD chains"
		PopulatingBadChain
		StatusLSB
		#### IPtables - Populating user chains

		#### IPtables - Populating ICMP chain
		Message="IPtables - Populating ICMP chain (allow seedbox users only)"
		if [ ! -z "$ServerProvider" ] && [ "$ServerProvider" != "none" ]; then
			Message="IPtables - Populating ICMP user chains (allow seedbox users and $ServerProvider)"
		fi
		log_daemon_msg "$Message"
		PopulatingIcmpChain
		StatusLSB
		#### IPtables - Populating ICMP chain
		
		#### IPtables - Populating UDP inboud user chain
		log_daemon_msg "IPtables - Populating UDP inboud chain"
		PopulatingUdpInboundChain
		StatusLSB
		#### IPtables - Populating UDP inboud chain
		
		#### IPtables - Populating UDP outbound chain
		log_daemon_msg "IPtables - Populating UDP outbound chain"
		PopulatingUdpOutboundChain
		StatusLSB
		#### IPtables - Populating UDP outbound chain

		#### IPtables - Populating TCP inboud user chain
		log_daemon_msg "IPtables - Populating TCP inboud chain"
		PopulatingTcpInboundChain
		StatusLSB
		#### IPtables - Populating TCP inboud chain

		#### IPtables - Populating TCP outbound user chain
		log_daemon_msg "IPtables - Populating TCP outbound chain"
		PopulatingTcpOutboundChain
		StatusLSB
		#### IPtables - Populating TCP outbound chain	

		#### IPtables - Process INPUT chain
		log_daemon_msg "IPtables - Process INPUT chain"
		ProcessInputChain
		StatusLSB
		#### IPtables - Process INPUT chain

		#### IPtables - Process FORWARD chain
		log_daemon_msg "IPtables - Process FORWARD chain"
		ProcessForwardChain
		StatusLSB
		#### IPtables - Process FORWARD chain
		
		#### IPtables - Process OUTPUT chain
		log_daemon_msg "IPtables - Process OUTPUT chain"
		ProcessOutputChain
		StatusLSB
		#### IPtables - Process OUTPUT chain
		
		#### IPtables - Process POSTROUTING chain
		log_daemon_msg "IPtables - Process POSTROUTING chain"
		ProcessPostroutingChain
		StatusLSB
		#### IPtables - Process POSTROUTING chain		
		
		#### Services - Create all security rules for services
		CreateServicesRules
		#### Services - Create all security rules for services
		
		#### START services
		ManageServices start "$ServicesToRestart"
		#### START services			
		
		#### Save Iptables Rules for Webmin
		iptables-save > /etc/iptables.up.rules
		cp /etc/iptables.up.rules /etc/MySB/files/current-iptables-rules
		if [ "$IsInstalled_PeerGuardian" == "YES" ] && [ -d /etc/webmin/firewall/ ]; then
			cp /etc/iptables.up.rules /etc/webmin/firewall/iptables.save
		fi
		#### Save Iptables Rules for Webmin
	;;
	
	"refresh")
		#### IPtables - SAVE Iptables Rules
		log_daemon_msg "IPtables - SAVE Iptables Rules"
		iptables-save > /etc/MySB/temp/current-iptables-rules
		StatusLSB
		#### IPtables - SAVE Iptables Rules

		#### IPtables - ALTER Iptables Rules
		## MySB_CreateUser
		for FnUser in $UsersList; do
			UserId="`sqlite3 $MySB_DB \"SELECT id_users FROM users WHERE users_ident = '$FnUser'\"`"
			UserIPs="`sqlite3 $MySB_DB \"SELECT ipv4 FROM users_addresses WHERE is_active = '1' AND id_users = '$UserId'\" | sed -e 's/^ //g;' | sed 's/\s+$//'`"

			# icmp_packets chain			
			NumLign=$(grep -n 'Allow ICMP for user' /etc/MySB/temp/current-iptables-rules)
			sed -i '/Allow ICMP for user '$FnUser'/d' /etc/MySB/temp/current-iptables-rules
			for ip in $UserIPs; do
				sed -i ""$NumLign"i\iptables -A icmp_packets -p ICMP -s $ip/32 --icmp-type 8 -j ACCEPT -m comment --comment \"Allow ICMP for $FnUser\"\n" /etc/MySB/temp/current-iptables-rules
				sed -i ""$NumLign"i\iptables -A icmp_packets -p ICMP -s $ip/32 --icmp-type 8 -j LOG --log-prefix \"fp=icmp_packets:2 a=ACCEPT \" -m comment --comment \"Allow ICMP for $FnUser\"\n" /etc/MySB/temp/current-iptables-rules
			done
			# icmp_packets chain
			
			# udp_inbound chain
			NumLign=$(grep -n 'NTP for user' /etc/MySB/temp/current-iptables-rules)
			sed -i '/NTP for user '$FnUser'/d' /etc/MySB/temp/current-iptables-rules
			for ip in $UserIPs; do
				sed -i ""$NumLign"i\iptables -A udp_inbound -p UDP -s $ip/32 --destination-port 123 -j ACCEPT -m comment --comment \"NTP for user $FnUser\"\n" /etc/MySB/temp/current-iptables-rules
			done			
			# udp_inbound chain
		done
		## MySB_CreateUser - icmp_packets chain
		


		
if [ "$ApplyNginx" == "true" ]; then
	
fi
if [ "$ApplyBind" == "true" ]; then

fi
if [ "$IsInstalled_DNScrypt" == "YES" ] && ! GetPid dnscrypt-proxy; then

fi
if [ "$ApplyFail2Ban" == "true" ]; then

fi
if [ "$IsInstalled_PeerGuardian" == "YES" ]; then

fi
		
NumLign=$(sed -n "/'\/bin\/tar'/=" $RutorrentPluginsDir/filemanager/conf.php)
(( NumLign++ ))
sed -i "${NumLign}i\$pathToExternals['bzip2'] = '\/bin\/bzip2';" $RutorrentPluginsDir/filemanager/conf.php	
		#### IPtables - ALTER Iptables Rules
	
		#### Services - Create all security rules for services
		CreateServicesRules
		#### Services - Create all security rules for services
		
		#### IPtables - RESTORE Iptables Rules
		log_daemon_msg "IPtables - RESTORE Iptables Rules"
		iptables-restore < /etc/MySB/temp/current-iptables-rules
		StatusLSB
		#### IPtables - RESTORE Iptables Rules		
		
		#### START services
		ManageServices start "$ServicesToRestart"
		#### START services		

		#### Save Iptables Rules for Webmin
		iptables-save > /etc/iptables.up.rules
		cp /etc/iptables.up.rules /etc/MySB/files/current-iptables-rules
		if [ "$IsInstalled_PeerGuardian" == "YES" ] && [ -d /etc/webmin/firewall/ ]; then
			cp /etc/iptables.up.rules /etc/webmin/firewall/iptables.save
		fi

		if CheckCommand 0 postfix; then postfix flush; fi
	;;

	*)
		echo -e "${CBLUE}Usage:$CEND	${CYELLOW}bash $ScriptName$CEND ${CGREEN}{clean|create|refresh} [ --full | --pgl | --nginx | --dnscrypt | --bind | --fail2ban ]$CEND"
		echo
		echo -e "${CYELLOW}	--full$CEND"
		echo -e "${CBLUE}		Refresh security rules for all available services. Like --pgl --nginx -- dnscrypt --bind -- fail2ban$CEND"
		echo -e "${CYELLOW}	--pgl$CEND"
		echo -e "${CBLUE}		Refresh security rules for PeerGuadian.$CEND"
		echo -e "${CYELLOW}	--nginx$CEND"
		echo -e "${CBLUE}		Refresh security rules for Nginx.$CEND"
		echo -e "${CYELLOW}	--dnscrypt$CEND"
		echo -e "${CBLUE}		Refresh security rules for DNScrypt-proxy.$CEND"
		echo -e "${CYELLOW}	--bind$CEND"
		echo -e "${CBLUE}		Refresh security rules for BIND.$CEND"
		echo -e "${CYELLOW}	--fail2ban$CEND"
		echo -e "${CBLUE}		Refresh security rules for Fail2Ban.$CEND"
		
		
		END=OFF
		EndingScript 0
	;;
esac

# -----------------------------------------
source /etc/MySB/inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################