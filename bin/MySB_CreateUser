#!/bin/bash 
# ----------------------------------
source /etc/MySB/inc/includes_before.bsh
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################

if [ "$USAGE" == "ON" ]; then
	ListingUsers
	for seedUser in $UsersList; do
		LIST="$LIST|$seedUser"
	done
	LIST="`echo \($LIST\) | sed -e 's/(|/(/g;'`"

	if [ ! -z $LIST ]; then
		echo -e "${CBLUE}Available users: $CEND${CYELLOW}$LIST$CEND"
	fi
	QuestionGetString NO  "Username for your seedbox: " NewUser
	while [ ! "`echo \"$LIST\" | grep $NewUser`" = "" ]; do
		QuestionGetString NO  "Username for your seedbox: " NewUser
	done

	NewUserPassword=`mkpasswd $NewUser`
	NewUserPassword=`echo $NewUserPassword | sed "s/\///g"`
	if [ -s "NewUserPassword" ]; then
		QuestionGetString YES "Password for user $NewUser: " NewUserPassword
	fi
	QuestionGetString NO  "User can login via SFTP? " UserSFTP YES
	QuestionGetString NO  "Add user to sudoers? " UserSUDO NO
	while [ ! "`ValidateMail $UserEmail`" = "1" ]; do
		QuestionGetString NO  "Email for this user? " UserEmail
	done

	UserSFTP="$(echo $UserSFTP | sed 's/YES/1/g;' | sed 's/NO/0/g;')"
	UserSUDO="$(echo $UserSUDO | sed 's/YES/1/g;' | sed 's/NO/0/g;')"
else
	# It is the main user creation
	NewUser=$1
	NewUserPassword=$2
	UserSFTP=$3
	UserSUDO=$4
fi

#### STOP services
ManageServices stop ""

#### Users vars
HomeDir="/home/$NewUser"
HOMEDIR_ESCAPED=`echo $HomeDir | sed s,/,\\\\\\\\\\/,g`
UPPERNEWUSER=`echo $NewUser | tr '[:lower:]' '[:upper:]'`
NEWRPC=$UPPERNEWUSER

#### Users infos
ListingUsers
CountingUsers

NETWORKPORT="`sqlite3 $MySB_DB \"SELECT value FROM ports ORDER BY rowid DESC LIMIT 1\"`"
sqlite3 $MySB_DB "DELETE FROM ports WHERE value = '$NETWORKPORT';"
SCGIPORT="`sqlite3 $MySB_DB \"SELECT value FROM ports ORDER BY rowid DESC LIMIT 1\"`"
sqlite3 $MySB_DB "DELETE FROM ports WHERE value = '$SCGIPORT';"

#### user infos
log_daemon_msg "Info file creation for $NewUser"
if [ "$MainUser" != "$NewUser" ]; then	
	sqlite3 $MySB_DB "INSERT into users (users_ident,users_email,users_passwd,rpc,sftp,sudo,scgi_port,rtorrent_port,home_dir) VALUES (\"$NewUser\",\"$UserEmail\",\"$NewUserPassword\",\"$NEWRPC\",\"$UserSFTP\",\"$UserSUDO\",\"$SCGIPORT\",\"$NETWORKPORT\",\"$HomeDir\");"
else
	sqlite3 $MySB_DB "UPDATE users SET users_passwd = '', rpc = '$NEWRPC', scgi_port = '$SCGIPORT', rtorrent_port = '$NETWORKPORT', home_dir = '$HomeDir' WHERE users_ident = '$NewUser';"
fi
StatusLSB

#### create system user
log_daemon_msg "Create the system account for $NewUser"
useradd -c "MySB user $NewUser" -d $HomeDir -s /bin/bash $NewUser &> /dev/null
StatusLSB

#### create directories
log_daemon_msg "Create directories for $NewUser"
ChangingHomeUserRights "$NewUser" "$HomeDir"
StatusLSB

#### FTP
log_daemon_msg "Allow use of FTP and share for $NewUser"
echo "$NewUser" >> /etc/vsftpd.chroot_list
mount --bind /home/MySB_share $HomeDir/rtorrent/share
StatusLSB

#### add to groups
log_daemon_msg "Assign user groups to $NewUser"
addgroup $NewUser MySB_users &> /dev/null

if [ "$UserSUDO" == "YES" ]; then
	addgroup $NewUser sudo &> /dev/null
fi
if [ "$UserSFTP" == "YES" ]; then
	addgroup $NewUser sshdusers &> /dev/null
fi
StatusLSB

#### custumize profile
if [ ! -f $HomeDir/.profile ]; then
	log_daemon_msg "Customize profile for $NewUser"
	cp /etc/skel/.bashrc $HomeDir
	cp /etc/skel/.bash_logout $HomeDir
	cp /etc/skel/.profile $HomeDir
	chown $NewUser:$NewUser $HomeDir/.bashrc
	chown $NewUser:$NewUser $HomeDir/.bash_logout
	chown $NewUser:$NewUser $HomeDir/.profile
	perl -pi -e "s/#force_color_prompt=yes/force_color_prompt=yes/g" $HomeDir/.bashrc
	StatusLSB
fi

#### rTorrent (.rtorrent.rc)
log_daemon_msg "Create the rTorrent configuration file for $NewUser"
cp /etc/MySB/templates/rtorrent.rc.template $HomeDir/.rtorrent.rc
perl -pi -e "s/<server_ip>/$SrvIpAddress/g" $HomeDir/.rtorrent.rc
perl -pi -e "s/<username>/$NewUser/g" $HomeDir/.rtorrent.rc
perl -pi -e "s/<homedir>/$HOMEDIR_ESCAPED/g" $HomeDir/.rtorrent.rc
perl -pi -e "s/<scgi_port>/$SCGIPORT/g" $HomeDir/.rtorrent.rc
perl -pi -e "s/<port_range>/$NETWORKPORT-$NETWORKPORT/g" $HomeDir/.rtorrent.rc
if [ "$MySB_PeerBlock" == "rTorrent" ]; then
	perl -pi -e "s/#{1}ipv4_filter.load/ipv4_filter.load/g" $HomeDir/.rtorrent.rc
	perl -pi -e "s/#{1}print/print/g" $HomeDir/.rtorrent.rc
	perl -pi -e "s/#{1}schedule=load_filter/schedule=load_filter/g" $HomeDir/.rtorrent.rc
fi

case "$FILESYSTEMTYPE" in
	"ext4"|"xfs"|"btrfs")
		perl -pi -e "s/system.file_allocate.set = no/system.file_allocate.set = yes/g" $HomeDir/.rtorrent.rc
	;;	
	*)
		perl -pi -e "s/^system.file_allocate.set = yes/system.file_allocate.set = no/g" $HomeDir/.rtorrent.rc
	;;			
esac
StatusLSB

#### Plugins per users
log_daemon_msg "Create ruTorrent plugins directories for $NewUser"
# create subdirectory plugins for user and copy all conf.php
ruTorrentUsersConfigs "$NewUser"
StatusLSB

#### stream
log_daemon_msg "Create ruTorrent plugin Stream (config.php) for $NewUser"
if [ -f /etc/MySB/web/rutorrent/conf/users/$NewUser/plugins/stream/config.php ]; then
	perl -pi -e "s/$auth = '';/$auth = '$NewUser:$NewUserPassword';/g" /etc/MySB/web/rutorrent/conf/users/$NewUser/plugins/stream/config.php
fi
StatusLSB

#### NginX
log_daemon_msg "Creating RPC file for $NewUser"
(
cat <<'EOF'
location /<USERNAME> {
	include scgi_params;
	scgi_pass 127.0.0.1:5995;
	auth_basic "MySB";
	auth_basic_user_file "/etc/nginx/passwd/MySB_<username>";
}

EOF
) > /etc/nginx/rpc/$NewUser.conf
perl -pi -e "s/5995/$SCGIPORT/g" /etc/nginx/rpc/$NewUser.conf
perl -pi -e "s/<username>/$NewUser/g" /etc/nginx/rpc/$NewUser.conf
perl -pi -e "s/<USERNAME>/$UPPERNEWUSER/g" /etc/nginx/rpc/$NewUser.conf
StatusLSB

#### CakeBox
if [ "$IsInstalled_Cakebox" == "YES" ]; then
	log_daemon_msg "Create Cakebox configuration for $NewUser"

	(
	cat <<'EOF'
location /<username>/ {
		alias /home/<username>/;
		add_header Content-Disposition "attachment";
		satisfy any;
		allow all;
}

EOF
	) > /etc/nginx/rpc/$NewUser.cakebox
	perl -pi -e "s/<username>/$NewUser/g" /etc/nginx/rpc/$NewUser.cakebox
	
	StatusLSB
fi

#### OpenVPN
if [ "$IsInstalled_OpenVPN" == "YES" ]; then
	log_daemon_msg "Create OpenVPN account for user $NewUser"
	screen -dmS OpenVPN_Client /bin/bash /etc/MySB/install/OpenVPN.bsh client "$NewUser";
	WaitingSTD OpenVPN_Client	
	StatusLSB
fi

#### script init
log_daemon_msg "Create init script for $NewUser"
cp /etc/MySB/templates/etc.init.rtorrent.template /etc/init.d/rtorrent-$NewUser
perl -pi -e "s/<username>/$NewUser/g" /etc/init.d/rtorrent-$NewUser
chmod +x /etc/init.d/rtorrent-$NewUser
update-rc.d rtorrent-$NewUser defaults 99 &> /dev/null
StatusLSB

#### cron
log_daemon_msg "Add init script to cron for $NewUser"
crontab -l > /tmp/crontab.tmp
sed -i '/'$NewUser'/d' /tmp/crontab.tmp
echo "5 * * * * if ! ( /bin/ps U $NewUser | grep rtorrent &> /dev/null ); then /etc/init.d/rtorrent-$NewUser restart &> /dev/null; fi" >> /tmp/crontab.tmp
echo "0 12 1 * * /bin/bash /etc/MySB/scripts/PaymentReminder.bsh $NewUser &> /dev/null" >> /tmp/crontab.tmp
crontab /tmp/crontab.tmp
rm -f /tmp/crontab.tmp
StatusLSB

#### rtorrent max memory & rTorrent Blocklist
for seedUser in $UsersList; do
	log_daemon_msg "Change parameter 'pieces.memory.max.set' for $seedUser"
	LIGN=$(sed -n '/pieces.memory.max.set/=' /home/$seedUser/.rtorrent.rc)
	sed -i ''$LIGN'd' /home/$seedUser/.rtorrent.rc
	sed -i ''$LIGN'i\pieces.memory.max.set = '$(((($MEMORY/$TotalUsers)*1024)*1024))'\n' /home/$seedUser/.rtorrent.rc
	StatusLSB

	if [ -f /etc/MySB/files/blocklist/blocklist_rtorrent.txt ]; then
		log_daemon_msg "Copy the blocklist file for $seedUser"
		cp /etc/MySB/files/blocklist/* $HomeDir/blocklist/
		StatusLSB
	else
		log_daemon_msg "Creating a new blocklist file for $seedUser"
		ScriptInvoke 'screen' '/etc/MySB/scripts/BlocklistsRTorrent.bsh'
		StatusLSB	
	fi

	service rtorrent-$seedUser status &> /dev/null
	if [ $? -gt 0 ]; then
		service rtorrent-$seedUser restart
	else
		service rtorrent-$seedUser reload
	fi
done

#### Create new security rules
log_daemon_msg "Create new security rules"
ScriptInvoke 'screen' '/etc/MySB/scripts/FirewallAndSecurity.bsh' 'new'
StatusLSB

#### renting
MonthlyPayment "$NewUser"

#### Assign password
ScriptInvoke 'source' '/etc/MySB/bin/MySB_ChangeUserPassword' $NewUser $NewUserPassword

#### START services
ManageServices start "vsftpd nginx cron"

# -----------------------------------------
source /etc/MySB/inc/includes_after.bsh
# -----------------------------------------
##################### LAST LINE ######################################