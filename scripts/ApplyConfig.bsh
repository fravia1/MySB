#!/bin/bash 
# ----------------------------------
source /etc/MySB/inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

if [ ! -z "$1" ] && [ ! -z "$2" ]; then
	# "BlocklistsRTorrent.bsh": 	DOUBLON / ADMIN
	# "FirewallAndSecurity.bsh": 	DOUBLON / USER
	# "GetTrackersCert.bsh": 		DOUBLON / ADMIN
	# "MySB_CreateUser": 			ADMIN / ARGS
	# "MySB_DeleteUser": 			ADMIN / ARGS
	# "MySB_ChangeUserPassword": 	DOUBLON / USER / ARGS
	# "Postfix": 					DOUBLON / ADMIN
	
	ScriptToStart="$1"

	# 1 - Purger la base des entrées en double (command + user), uniquement l'entrée avec la priorité la plus haute sera conservée
	# Applicable pour seulement quelques commandes
	AllUser="`sqlite3 $MySB_DB \"SELECT user FROM commands WHERE 1\"`"
	for User in $AllUser; do
		AllCommandsUser="`sqlite3 $MySB_DB \"SELECT commands FROM commands WHERE user = '$User'\"`"
		for CommandUser in $AllCommandsUser; do
			case "$ScriptToStart" in
				"BlocklistsRTorrent.bsh"|"FirewallAndSecurity.bsh"|"GetTrackersCert.bsh"|"MySB_ChangeUserPassword"|"Postfix") # On peut supprimer les doublons
					FirstCommandUser="`sqlite3 $MySB_DB \"SELECT min(priority) FROM commands WHERE user = '$User' AND commands = '$CommandUser'\"`"
					LastCommandUser="`sqlite3 $MySB_DB \"SELECT max(priority) FROM commands WHERE user = '$User' AND commands = '$CommandUser'\"`"
					for ((FirstCommandUser < LastCommandUser; FirstCommandUser++)) {
						# On supprime les premières commandes
						sqlite3 $MySB_DB "DELETE FROM commands WHERE user = '$User' AND commands = '$CommandUser' AND priority = '$FirstCommandUser'"
					done
				;;	
			esac
		done
	done

	# 2 - En fonction de l'ensemble des commandes, on réorganise certaines.
	# Par exemple, la commande 'FirewallAndSecurity.bsh' devra être exécutée une seule fois et en dernier
	# On en garde qu'une seule tout utilisateur confondu et assigne une priorité maxi.
	LastOneMin="`sqlite3 $MySB_DB \"SELECT min(priority) FROM commands WHERE commands = 'FirewallAndSecurity.bsh'\"`"
	LastOneMax="`sqlite3 $MySB_DB \"SELECT max(priority) FROM commands WHERE commands = 'FirewallAndSecurity.bsh'\"`"
	for ((LastOneMin < LastOneMax; LastOneMin++)) {
		# On supprime les premières commandes
		sqlite3 $MySB_DB "DELETE FROM commands WHERE commands = 'FirewallAndSecurity.bsh' AND priority = '$LastOneMin'"	
	done

	# Maintenant on prend la priorité globale maxi toute commandes confondues, puis on incrémente de 1 'FirewallAndSecurity.bsh'.
	LastPriority="`sqlite3 $MySB_DB \"SELECT max(priority) FROM commands WHERE 1\"`"
	(( LastPriority++ ))
	sqlite3 $MySB_DB "UPDATE commands SET priority = '$LastPriority' WHERE users_ident = 'FirewallAndSecurity.bsh';"

	# 3 - On peut maintenant exécuté les commandes une à une dans l'ordre ascendant des priorités.
	AllCommands="`sqlite3 $MySB_DB \"SELECT commands, user FROM commands WHERE 1 ORDER BY priority ASC\"`"
	IFS=$'\n'
	for MyCommand in $AllCommands; do
		Command=`echo $MyCommand | awk '{split($0,a,"|"); print a[1]}'`
		User=`echo $MyCommand | awk '{split($0,a,"|"); print a[2]}'`

		case "$Command" in
			"MySB_CreateUser"|"MySB_DeleteUser"|"MySB_ChangeUserPassword") # 3 args
				CommandArg="`sqlite3 $MySB_DB \"SELECT args FROM commands WHERE commands = '$Command' AND user = '$User'\"`"
			;;
		esac

		case "$Command" in
			"MySB_CreateUser") # ($1 = user, $2 = sftp, $3 = sudo, $4 = email)
				IFS='|' read -a array <<< "$CommandArg"
				UserToCreate="${array[0]}"
				UserSftp="${array[1]}"
				UserSudo="${array[2]}"
				UserMail="${array[3]}"

				#/bin/bash /etc/MySB/bin/MySB_CreateUser "$2" "$3" "$4" "$5" "APPLYCONFIG"
				WaitingSTD MySB_CreateUser
				screen -dmS MySB_CreateUser /bin/bash /etc/MySB/bin/MySB_CreateUser "$UserToCreate" "$UserSftp" "$UserSudo" "$UserMail" "APPLYCONFIG";
			;;

			"MySB_DeleteUser") # 1 args
				UserToDelete="$CommandArg"

				#/bin/bash /etc/MySB/bin/MySB_DeleteUser "$2" "APPLYCONFIG"
				WaitingSTD MySB_DeleteUser
				screen -dmS MySB_DeleteUser /bin/bash /etc/MySB/bin/MySB_DeleteUser "$UserToDelete" "APPLYCONFIG";
			;;

			"MySB_ChangeUserPassword") # 2 args
				IFS='|' read -a array <<< "$CommandArg"
				UserName="${array[0]}"
				UserPass="${array[1]}"

				#/bin/bash /etc/MySB/bin/MySB_ChangeUserPassword "$2" "$3" "APPLYCONFIG"
				WaitingSTD MySB_ChangeUserPassword
				screen -dmS MySB_ChangeUserPassword /bin/bash /etc/MySB/bin/MySB_ChangeUserPassword "$UserName" "$UserPass" "APPLYCONFIG";
			;;

			"BlocklistsRTorrent.bsh")
				#/bin/bash /etc/MySB/scripts/BlocklistsRTorrent.bsh "APPLYCONFIG"
				WaitingSTD BlocklistsRTorrent
				screen -dmS BlocklistsRTorrent /bin/bash /etc/MySB/scripts/BlocklistsRTorrent.bsh "APPLYCONFIG";
				WaitingSTD
				screen -dmS FirewallAndSecurity /bin/bash /etc/MySB/scripts/FirewallAndSecurity.bsh "new" "APPLYCONFIG";
			;;

			"FirewallAndSecurity.bsh")
				#/bin/bash /etc/MySB/scripts/FirewallAndSecurity.bsh "new" "APPLYCONFIG"
				WaitingSTD
				screen -dmS FirewallAndSecurity /bin/bash /etc/MySB/scripts/FirewallAndSecurity.bsh "new" "APPLYCONFIG";
			;;

			"GetTrackersCert.bsh")
				#/bin/bash /etc/MySB/scripts/GetTrackersCert.bsh "APPLYCONFIG"
				WaitingSTD GetTrackersCert
				screen -dmS GetTrackersCert /bin/bash /etc/MySB/scripts/GetTrackersCert.bsh "APPLYCONFIG";
				WaitingSTD
				screen -dmS FirewallAndSecurity /bin/bash /etc/MySB/scripts/FirewallAndSecurity.bsh "new" "APPLYCONFIG";
			;;

			"Postfix")
				#/bin/bash /etc/MySB/install/Postfix "APPLYCONFIG"
				WaitingSTD Postfix
				screen -dmS Postfix /bin/bash /etc/MySB/install/Postfix "CRON";
			;;	
		esac
	done
	unset IFS
fi

# -----------------------------------------
source /etc/MySB/inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################