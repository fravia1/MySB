#!/bin/bash 
# ----------------------------------
source /etc/MySB/inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################
#
# Usage:	FirewallAndSecurity {clean|new}
#
##################### FIRST LINE #####################################

#### VARs
Modules="tun,iptable_filter,iptable_nat,iptable_mangle,ip_gre,ip_tables,ip_nat_ftp,ip_nat_irc,ip_conntrack,ip_conntrack_ftp,ip_conntrack_irc,ipt_REJECT,ipt_tos,ipt_TOS,ipt_limit,ipt_multiport,ipt_TCPMSS,ipt_tcpmss,ipt_ttl,ipt_length,ipt_LOG,ipt_conntrack,ipt_helper,ipt_state,ipt_recent,ipt_owner,ipt_mark,ipt_REDIRECT,ipt_MASQUERADE,ipt_MARK,xt_connlimit,xt_limit,xt_multiport,xt_state,xt_owner,xt_NFQUEUE"
ListingUsers #($UsersList)

#### Begin
case $1 in
	clean)
		#### STOP services
		ManageServices stop "pglcmd fail2ban"

		# Vidage et suppression des rÃ¨gles existantes :
		log_daemon_msg "Emptying and removal of existing rules"
		for TABLE in filter nat mangle; do
			iptables -t $TABLE -F
			iptables -t $TABLE -X
		done
		StatusLSB

		log_daemon_msg "Authorize any incoming connection any outgoing connection"
		iptables -t filter -P INPUT ACCEPT
		iptables -t filter -P FORWARD ACCEPT
		iptables -t filter -P OUTPUT ACCEPT
		StatusLSB

		#### Clean users IP Addresses
		if [ -f /etc/nginx/conf.d/ip_restriction ] && CheckCommand 0 nginx; then
			log_daemon_msg "Cleaning users IP Addresses"
			echo "	satisfy all;" > /etc/nginx/conf.d/ip_restriction
			StatusLSB
		fi

		#### START services
		ManageServices start "nginx"
	;;
	new)
		#### VARs
		ServicesToManage=""
	
		#### NO spoofing
		if [ -e /proc/sys/net/ipv4/conf/all/rp_filter ]; then
			log_daemon_msg "No spoofing"
			for filtre in /proc/sys/net/ipv4/conf/*/rp_filter; do
				echo 1 > $filtre
			done
			StatusLSB
		fi

		#### Modules
		log_daemon_msg "Loading modules"
		IFS=$','
		for item in $Modules; do
			IfExist=`lsmod | grep "$item"`
			if [ $? -eq 0 ] ; then
				modprobe $item
			fi
		done
		unset IFS
		StatusLSB

		#### Emptying and removal of existing rules
		log_daemon_msg "Emptying and removal of existing rules"
		for TABLE in filter nat mangle; do
			iptables -t $TABLE -F
			iptables -t $TABLE -X
		done
		StatusLSB

		#### Prohibit any incoming connection and allow any outgoing connection
		log_daemon_msg "Prohibit any incoming connection and authorize any outgoing connection"
		iptables -t filter -P INPUT DROP
		iptables -t filter -P FORWARD DROP
		iptables -t filter -P OUTPUT ACCEPT	
		StatusLSB

		#### Do not break the established connections
		log_daemon_msg "Do not break established connections"
		iptables -A INPUT -m state --state RELATED,ESTABLISHED -i $PrimaryInet -j ACCEPT
		iptables -A OUTPUT -m state --state RELATED,ESTABLISHED -o $PrimaryInet -j ACCEPT
		StatusLSB

		#### Allow loopback
		log_daemon_msg "Allow loopback interface"
		iptables -t filter -A INPUT -i lo -j ACCEPT
		StatusLSB

		#### Seedbox users IPs
		log_daemon_msg "Creating IP white lists"
		# List all users IPs
		SeedboxUsersIPs=`echo $SeedboxUsersIPs | sed s,/,\\\\\\\\\\/,g`	
		SeedboxUsersIPs=$(echo "$SeedboxUsersIPs"|tr " " "\n"|sort|uniq|tr "\n" " ") # sort as uniq
		MainUserIPs=`echo $MainUserIPs | sed s,/,\\\\\\\\\\/,g`
		MainUserIPs=$(echo "$MainUserIPs"|tr " " "\n"|sort|uniq|tr "\n" " ") # sort as uniq
		AllUsersIPs="${SeedboxUsersIPs} ${MainUserIPs}"
		StatusLSB

		#### ICMP
		log_daemon_msg "Allow incoming ping for seedbox users"
		for ip in $AllUsersIPs; do 
			iptables -t filter -A INPUT -p icmp -s $ip/32 -j ACCEPT -m comment --comment "ICMP"
		done
		for ip in $VpnIPs; do
			iptables -t filter -A INPUT -p icmp -s $ip -j ACCEPT -m comment --comment "ICMP"
		done
		StatusLSB
		
		if [ ! -z "$ServerProvider" ] && [ "$ServerProvider" != "none" ]; then
			log_daemon_msg "Allow incoming ping for $ServerProvider"
			case "$ServerProvider" in
				"OVH")
					OvhIp1="`echo $SrvIpAddress | sed "s/$(echo $SrvIpAddress | cut -d '.' -f 4)/250/g;"`"
					OvhIp2="`echo $SrvIpAddress | sed "s/$(echo $SrvIpAddress | cut -d '.' -f 4)/249/g;"`"
					OvhIp3="`echo $SrvIpAddress | sed "s/$(echo $SrvIpAddress | cut -d '.' -f 4)/251/g;"`"
					iptables -A INPUT -i $PrimaryInet -p icmp --source proxy-rbx2.ovh.net -j ACCEPT -m comment --comment "Monitoring $ServerProvider"
					iptables -A INPUT -i $PrimaryInet -p icmp --source proxy.rbx.ovh.net -j ACCEPT -m comment --comment "Monitoring $ServerProvider"
					iptables -A INPUT -i $PrimaryInet -p icmp --source proxy.sbg.ovh.net -j ACCEPT -m comment --comment "Monitoring $ServerProvider"
					iptables -A INPUT -i $PrimaryInet -p icmp --source proxy.bhs.ovh.net -j ACCEPT -m comment --comment "Monitoring $ServerProvider"
					iptables -A INPUT -i $PrimaryInet -p icmp --source ping.ovh.net -j ACCEPT -m comment --comment "Monitoring $ServerProvider"
					iptables -A INPUT -i $PrimaryInet -p icmp --source $OvhIp1 -j ACCEPT -m comment --comment "Monitoring $ServerProvider"
					iptables -A INPUT -i $PrimaryInet -p icmp --source $OvhIp2 -j ACCEPT -m comment --comment "Monitoring $ServerProvider"
					iptables -A INPUT -i $PrimaryInet -p icmp --source $OvhIp3 -j ACCEPT -m comment --comment "Monitoring $ServerProvider"
				;;
				"ONLINE")
					iptables -A INPUT -i $PrimaryInet -p icmp --source 62.210.16.0/24 -j ACCEPT -m comment --comment "Monitoring $ServerProvider"
				;;
			esac
			StatusLSB
		fi

		#### HTTPS
		log_daemon_msg "Allow access to HTTPs"
		iptables -t filter -A INPUT -p tcp --dport $Port_HTTPS -i $PrimaryInet -j ACCEPT -m comment --comment "HTTPs"
		StatusLSB

		#### Webmin
		if [ "$IsInstalled_Webmin" == "YES" ]; then
			log_daemon_msg "Allow access to Webmin"
			iptables -t filter -A INPUT -p tcp --dport $Ports_Webmin -i $PrimaryInet -j ACCEPT -m comment --comment "Webmin"
			StatusLSB
		fi

		#### FTP
		log_daemon_msg "Allow access to FTP"
		iptables -t filter -A INPUT -p tcp --dport $Port_FTP -i $PrimaryInet -j ACCEPT -m comment --comment "FTP"
		iptables -t filter -A INPUT -p tcp --dport $Port_FTP_Data -i $PrimaryInet -j ACCEPT -m comment --comment "FTP Data"
		iptables -t filter -A INPUT -p tcp --dport $Port_FTP_Passive -i $PrimaryInet -j ACCEPT -m comment --comment "FTP Passive"
		StatusLSB

		#### SSH
		log_daemon_msg "Allow access to SSH"
		iptables -t filter -A INPUT -p tcp --dport $Port_SSH -i $PrimaryInet -j ACCEPT -m comment --comment "SSH"
		StatusLSB

		#### OpenVPN
		if [ "$IsInstalled_OpenVPN" == "YES" ]; then	
			#### For network
			echo 1 > /proc/sys/net/ipv4/ip_forward
			perl -pi -e "s/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/g" /etc/sysctl.conf

			log_daemon_msg "Allow use of OpenVPN TUN With Redirect Gateway"
			iptables -t filter -A INPUT -i tun0 -j ACCEPT
			iptables -t filter -A INPUT -p ${OpenVPN_Proto} --dport ${Port_OpenVPN_WithGW} -i $PrimaryInet -j ACCEPT -m comment --comment "OpenVPN"
			iptables -t filter -A FORWARD -i tun0 -o $PrimaryInet -s 10.0.0.0/24 -m conntrack --ctstate NEW -j ACCEPT -m comment --comment "OpenVPN"
			iptables -t filter -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT -m comment --comment "OpenVPN"
			iptables -t nat -A POSTROUTING -s 10.0.0.0/24 -j MASQUERADE -m comment --comment "OpenVPN"
			StatusLSB

			log_daemon_msg "Allow use of OpenVPN TUN Without Redirect Gateway"
			iptables -t filter -A INPUT -i tun1 -j ACCEPT
			iptables -t filter -A INPUT -p ${OpenVPN_Proto} --dport ${Port_OpenVPN_WithoutGW} -i $PrimaryInet -j ACCEPT -m comment --comment "OpenVPN"
			StatusLSB
		fi

		#### PlexMedia Server
		if [ "$IsInstalled_PlexMedia" == "YES" ]; then
			log_daemon_msg "Allow access to Plex Media Server on TCP"
			for PlexTcpPort in $Ports_TCP_PlexMedia; do 
				iptables -t filter -A INPUT -p tcp --dport $PlexTcpPort -i $PrimaryInet -j ACCEPT -m comment --comment "Plex Media Server TCP"
			done
			unset PlexTcpPort
			StatusLSB

			if [ "$IsInstalled_OpenVPN" == "YES" ]; then
				log_daemon_msg "Allow use of Plex Media Server on UDP (OpenVPN)"
				for PlexUdpPort in $Ports_UDP_PlexMedia; do 
					iptables -t filter -A INPUT -p udp --dport $PlexUdpPort -j ACCEPT -m comment --comment "Plex Media Server UDP"
				done
				unset PlexUdpPort
				StatusLSB
			fi
		fi

		#### rTorrent
		for SeedboxUser in $UsersList; do
			log_daemon_msg "Allow access to rTorrent for $SeedboxUser"
			PORT_START="`sqlite3 $MySB_DB \"SELECT scgi_port FROM users WHERE users_ident = '$SeedboxUser'\"`"
			PORT_END="`sqlite3 $MySB_DB \"SELECT rtorrent_port FROM users WHERE users_ident = '$SeedboxUser'\"`"
			iptables -t filter -A INPUT -p tcp --dport $PORT_START:$PORT_END -i $PrimaryInet -j ACCEPT -m comment --comment "rTorrent $SeedboxUser"	
			StatusLSB
		done

		#### NginX
		if [ -f /etc/nginx/conf.d/ip_restriction ] && CheckCommand 0 nginx; then
			# 1 - Server IP addresses
			# log_daemon_msg "Allow access to web server for '$HostNameFQDN'"		
			# echo "	# Server IP" > /etc/nginx/conf.d/ip_restriction
			# echo "	allow $SrvIpAddress;" >> /etc/nginx/conf.d/ip_restriction
			# echo "	allow 127.0.0.1;" >> /etc/nginx/conf.d/ip_restriction
			# echo "	allow 127.0.1.1;" >> /etc/nginx/conf.d/ip_restriction
			# StatusLSB
			log_daemon_msg "Allow access to web server for localhost"		
			echo "	# Localhost" > /etc/nginx/conf.d/ip_restriction
			echo "	allow 127.0.0.1;" >> /etc/nginx/conf.d/ip_restriction
			StatusLSB			

			# 2 - Main user IP addresses
			log_daemon_msg "Allow access to web server for mainuser"	
			echo "	# Restricted IP for mainuser" >> /etc/nginx/conf.d/ip_restriction
			for IPv4 in $MainUserIPs; do
				echo "	allow $IPv4;" >> /etc/nginx/conf.d/ip_restriction
			done
			unset IPv4
			StatusLSB

			# 3 - Normal user IP addresses
			log_daemon_msg "Allow access to web server for all users"
			echo "	# Restricted IP for all users" >> /etc/nginx/conf.d/ip_restriction
			for IPv4 in $SeedboxUsersIPs; do
				echo "	allow $IPv4;" >> /etc/nginx/conf.d/ip_restriction
			done
			unset IPv4
			StatusLSB

			if [ "$IsInstalled_OpenVPN" == "YES" ]; then
				# 4 - OpenVPN user IP addresses
				log_daemon_msg "Allow access to web server for OpenVPN users"
				echo "	# Restricted IP for OpenVPN users" >> /etc/nginx/conf.d/ip_restriction
				for IPv4 in $VpnIPs; do
					echo "	allow $IPv4;" >> /etc/nginx/conf.d/ip_restriction
				done
				unset IPv4
				StatusLSB
			fi
			echo "	deny all;" >> /etc/nginx/conf.d/ip_restriction

			ServicesToManage="${ServicesToManage} nginx"
		fi

		#### BIND
		if [ -f /etc/bind/named.conf ] && CheckCommand 0 named; then
			AllTrackersDomain="`sqlite3 $MySB_DB \"SELECT tracker_domain FROM trackers_list WHERE is_active = '0' AND to_check = '0'\"`"
			echo "# Blacklisted domain (ex: inactive trackers)" > /etc/bind/named.conf.blacklists
			for TrackerDomain in $AllTrackersDomain; do
				echo "zone \"$TrackerDomain\"        IN  { type master; file \"zones/intercept.zone\"; };" >> /etc/bind/named.conf.blacklists
			done
			ServicesToManage="${ServicesToManage} bind9"
		fi

		#### Fail2Ban
		if [ "$IsInstalled_Fail2Ban" == "YES" ]; then
			Fail2BanWhitheList 1
			ServicesToManage="${ServicesToManage} fail2ban"
		fi

		#### PeerGuardian
		if [ "$IsInstalled_PeerGuardian" == "YES" ]; then
			# Create '/etc/pgl/pglcmd.conf'
			PeerGuardianPglcmdConf 0
			# Create '/etc/pgl/allow.p2p'
			PeerGuardianAllowP2P 0
			# Create '/etc/pgl/blocklists.list'
			PeerGuardianBlocklistsList 0 "CreateFile"

			ServicesToManage="${ServicesToManage} pglcmd"
		fi

		#### DNScrypt-proxy (restart needed ?)
		if [ "$IsInstalled_DNScrypt" == "YES" ] && [ "$ResolverName" != "$WishedResolver" ]; then
			ServicesToManage="${ServicesToManage} dnscrypt-proxy"
		fi

		#### START services
		ManageServices start "$ServicesToManage"

		#### Save Iptables Rules for Webmin
		iptables-save > /etc/iptables.up.rules
		cp /etc/iptables.up.rules /etc/MySB/files/current-iptables-rules
		if [ "$IsInstalled_PeerGuardian" == "YES" ] && [ -d /etc/webmin/firewall/ ]; then
			cp /etc/iptables.up.rules /etc/webmin/firewall/iptables.save
		fi

		#### Flush mail queue
		if CheckCommand 0 postfix; then postfix flush; fi
	;;

	*)
		echo -e "${CBLUE}Usage:$CEND	${CYELLOW}bash $0$CEND ${CGREEN}{clean|new}$CEND"
		EndingScript 0
	;;
esac

# -----------------------------------------
source /etc/MySB/inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################