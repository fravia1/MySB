#!/bin/bash 
# ----------------------------------
source ../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### file to allow the install to continue or not
if [ -f $InstallDir/temp/continue ]; then
	rm -vf $InstallDir/temp/continue
fi

#### VARs
RemovePluginCakebox=NO
RemovePluginManager=NO

#### Get all repos
AllRepos="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT * FROM repositories WHERE active = '1'\"`"

IFS=$'\n'
for Repo in $AllRepos; do
	RepoType=`echo $Repo | awk '{split($0,a,"|"); print a[2]}'`
	RepoDir=`echo $Repo | awk '{split($0,a,"|"); print a[3]}'`
	RepoName=`echo $Repo | awk '{split($0,a,"|"); print a[4]}'`
	RepoVersion=`echo $Repo | awk '{split($0,a,"|"); print a[5]}'`
	RepoFile=`echo $Repo | awk '{split($0,a,"|"); print a[6]}'`
	RepoOldFile=`echo $Repo | awk '{split($0,a,"|"); print a[7]}'`
	RepoURL=`echo $Repo | awk '{split($0,a,"|"); print a[8]}'`
	Error=0

	echo
	echo "########## $RepoType: $RepoName"
	echo "Directory : "$RepoDir
	echo "Version : "$RepoVersion
	echo "File : "$RepoFile
	echo "Old File : "$RepoOldFile
	echo "URL : "$RepoURL
	echo

	case "$RepoType" in
		"TARGZ")
			# Clean on version changed
			if [ -f $InstallDir/files/$RepoOldFile ]; then
				rm -vf $InstallDir/files/$RepoOldFile
			fi

			if [ ! -f $InstallDir/files/$RepoFile ]; then
				wget --no-check-certificate $RepoURL -O $InstallDir/files/$RepoFile
				Error=$?
			fi
			if [ -f $InstallDir/files/$RepoFile ]; then
				# We can delete repo dir ONLY IF tar.gz file exist...
				case "$1" in
					"UPGRADE"|"REFRESH")
						if [ -d $RepoDir ]; then
							rm -vrf $RepoDir
						fi
					;;
				esac
			fi			
			if [ ! -d $RepoDir ] && [ $Error -eq 0 ]; then
				tar -zxvf $InstallDir/files/$RepoFile -C $InstallDir/temp/
				Error=$?

				SubDir="`tar -ztf $InstallDir/files/$RepoFile | cut -d '/' -f 1 | uniq`"
				if [ -d $InstallDir/temp/$SubDir ]; then
					mv $InstallDir/temp/$SubDir $RepoDir
					Error=$?
				fi
			fi
		;;
		"WBM")
			# Clean on version changed
			if [ -f $InstallDir/files/$RepoOldFile ]; then
				rm -vf $InstallDir/files/$RepoOldFile
			fi

			if [ ! -f $RepoDir/$RepoFile ]; then
				wget --no-check-certificate $RepoURL -O $RepoDir/$RepoFile
				Error=$?
			fi
		;;
		"SVN")
			case "$1" in
				"UPGRADE")
					if [ -d $RepoDir ]; then
						svn up $RepoDir
						if [ $? -gt 0 ]; then
							svn switch $RepoURL $RepoDir
							Error=$?
						fi
					else
						svn co $RepoURL $RepoDir
						Error=$?
					fi
				;;
				*)
					if [ -d $RepoDir/.svn ]; then
						svn switch $RepoURL $RepoDir
						Error=$?
					else
						svn co $RepoURL $RepoDir
						Error=$?
					fi
				;;
			esac
		;;
		"GIT")
			case "$1" in
				"UPGRADE")
					if [ -d $RepoDir/ ]; then
						cd $RepoDir/
						git stash
						Error=$?
						
						if [ $Error -eq 0 ]; then
							git pull
							Error=$?
						fi
					else
						git clone $RepoURL $RepoDir
						Error=$?
					fi
				;;
				*)
					if [ ! -d $RepoDir ]; then
						git clone $RepoURL $RepoDir
						Error=$?
					fi
				;;
			esac
		;;
		"ZIP")
			# Clean on version changed
			if [ -f $InstallDir/files/$RepoOldFile ]; then
				rm -vf $InstallDir/files/$RepoOldFile
			fi

			case "$1" in
				"UPGRADE"|"REFRESH")
					if [ -d $RepoDir ]; then
						rm -vrf $RepoDir
					fi
				;;
			esac

			if [ ! -f $InstallDir/files/$RepoFile ]; then
				wget --no-check-certificate $RepoURL -O $InstallDir/files/$RepoFile
				Error=$?
			fi
			if [ -f $InstallDir/files/$RepoFile ]; then
				# We can delete repo dir ONLY IF zip file exist...
				case "$1" in
					"UPGRADE"|"REFRESH")
						if [ -d $RepoDir ]; then
							rm -vrf $RepoDir
						fi
					;;
				esac
			fi				
			if [ ! -d $RepoDir ] && [ $Error -eq 0 ]; then
				unzip $InstallDir/files/$RepoFile -d $InstallDir/temp/
				Error=$?

				SubDir="`unzip -l $InstallDir/files/$RepoFile | awk '{ print $4 }' | cut -d '/' -f 1 | uniq | sed '1,3d;$d'`"
				if [ -d $InstallDir/temp/$SubDir ]; then
					mv $InstallDir/temp/$SubDir $RepoDir
					Error=$?
				fi
			fi
		;;	
	esac

	if [ $Error -gt 0 ]; then
		case "$RepoName" in
			"Cakebox-Light")
				RemovePluginCakebox=YES
				sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET to_install = '0', is_installed = '0' WHERE serv_name = 'CakeBox-Light';"
			;;
			"Seedbox-Manager")
				RemovePluginManager=YES
				sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET to_install = '0', is_installed = '0' WHERE serv_name = 'Seedbox-Manager';"
			;;
			"Composer"|"NodeJS")
				RemovePluginCakebox=YES
				RemovePluginManager=YES
				sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET to_install = '0', is_installed = '0' WHERE serv_name = 'CakeBox-Light';"
				sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET to_install = '0', is_installed = '0' WHERE serv_name = 'Seedbox-Manager';"
			;;
			"XMLRPC"|"LibTorrent"|"rTorrent"|"ruTorrent"|"ruTorrents Official Plugins")
				echo "$RepoURL" >> $InstallDir/temp/continue
			;;
		esac
	fi	
done
unset IFS

if [ "$RemovePluginCakebox" == "YES" ]; then
	PluginDir="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT dir FROM repositories WHERE name = 'ruTorrent Plugin Link Cakebox'\"`"
	if [ -d $PluginDir ]; then rm -vrf $PluginDir; fi
fi
if [ "$RemovePluginManager" == "YES" ]; then
	PluginDir="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT dir FROM repositories WHERE name = 'ruTorrent Plugin Link Manager'\"`"
	if [ -d $PluginDir ]; then rm -vrf $PluginDir; fi
fi

# -----------------------------------------
source ../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################